-- Function to handle incoming chat messages
local function onChat(message, player)
    -- Check if the message matches the desired pattern for initiating a trade
    local initiatePattern = "Trade with (%w+) accepted, Method: Deposit"
    local usernameInitiated = message:match(initiatePattern)
    if usernameInitiated then
        -- Print the trade initiation message in both trade and in-game chat
        local tradeMessage = "Trade accepted with " .. usernameInitiated .. ", Method: Deposit"
        game:GetService("TradeService"):SendTradeChat(player, tradeMessage) -- Sending message to trade chat
        game:GetService("Chat"):Chat(player.Character, tradeMessage) -- Sending message to in-game chat
        
        -- Automatically accept the trade after the other person has accepted it
        local TradeService = game:GetService("TradeService")
        local playerToTrade = game.Players:FindFirstChild(usernameInitiated)
        if playerToTrade then
            TradeService:TradeAccept(playerToTrade)
        end
    elseif message == "Trade canceled!" then
        -- Print the trade cancellation message in both trade and in-game chat
        game:GetService("TradeService"):SendTradeChat(player, "Trade Canceled") -- Sending message to trade chat
        game:GetService("Chat"):Chat(player.Character, "Trade Canceled") -- Sending message to in-game chat
    elseif message ~= "Trade completed!" then
        -- Print the message in both trade and in-game chat
        game:GetService("TradeService"):SendTradeChat(player, message) -- Sending message to trade chat
        game:GetService("Chat"):Chat(player.Character, message) -- Sending message to in-game chat
        
        -- Check if the traded item is not a "huge" or "titanic" and print a message
        local tradeItem = message -- Assuming the message contains the traded item
        if tradeItem ~= "huge" and tradeItem ~= "titanic" then
            game:GetService("TradeService"):SendTradeChat(player, "Please Only Huges / Titanics please") -- Sending message to trade chat
            game:GetService("Chat"):Chat(player.Character, "Please Only Huges / Titanics please") -- Sending message to in-game chat
        end
    end
end

-- Connect the onChat function to the PlayerChatted event
game.Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onChat(message, player)
    end)
end)

-- Function to initiate a trade with another player
local function initiateTrade(otherPlayer)
    -- Replace "otherPlayer" with the appropriate player object
    local tradeMessage = "Trade with " .. otherPlayer.Name .. " accepted, Method: Deposit"
    game:GetService("TradeService"):SendTradeChat(player, tradeMessage) -- Sending message to trade chat
    game:GetService("Chat"):Chat(player.Character, tradeMessage) -- Sending message to in-game chat
end

-- Example usage: Replace "otherPlayer" with the player you want to trade with
initiateTrade(otherPlayer)

-- Example usage: Indicate when the trade is completed
game:GetService("TradeService"):SendTradeChat(player, "Trade completed!") -- Sending message to trade chat
game:GetService("Chat"):Chat(player.Character, "Trade completed!") -- Sending message to in-game chat

-- Example usage: Indicate when the trade is canceled
game:GetService("TradeService"):SendTradeChat(player, "Trade canceled!") -- Sending message to trade chat
game:GetService("Chat"):Chat(player.Character, "Trade canceled!") -- Sending message to in-game chat
